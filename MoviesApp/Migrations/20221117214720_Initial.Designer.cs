// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoviesApp.DataAccess;

#nullable disable

namespace MoviesApp.Migrations
{
    [DbContext(typeof(MovieDbContext))]
    [Migration("20221117214720_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Movies.Entities.Actor", b =>
                {
                    b.Property<int>("ActorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActorId"), 1L, 1);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActorId");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            ActorId = 1,
                            FirstName = "Humphrey",
                            LastName = "Bogart"
                        },
                        new
                        {
                            ActorId = 2,
                            FirstName = "Ingrid",
                            LastName = "Bergman"
                        },
                        new
                        {
                            ActorId = 3,
                            FirstName = "Keanu",
                            LastName = "Reeves"
                        },
                        new
                        {
                            ActorId = 4,
                            FirstName = "Carrie-Anne",
                            LastName = "Moss"
                        },
                        new
                        {
                            ActorId = 5,
                            FirstName = "John",
                            LastName = "Travolta"
                        },
                        new
                        {
                            ActorId = 6,
                            FirstName = "Uma",
                            LastName = "Thurman"
                        });
                });

            modelBuilder.Entity("Movies.Entities.Casting", b =>
                {
                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActorId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("Castings");

                    b.HasData(
                        new
                        {
                            ActorId = 1,
                            MovieId = 1,
                            Role = "Rick Blaine"
                        },
                        new
                        {
                            ActorId = 2,
                            MovieId = 1,
                            Role = "Ilsa Lund"
                        },
                        new
                        {
                            ActorId = 3,
                            MovieId = 2,
                            Role = "Neo"
                        },
                        new
                        {
                            ActorId = 4,
                            MovieId = 2,
                            Role = "Trinity"
                        },
                        new
                        {
                            ActorId = 5,
                            MovieId = 3,
                            Role = "Vincet Vega"
                        },
                        new
                        {
                            ActorId = 6,
                            MovieId = 3,
                            Role = "Mia Wallace"
                        });
                });

            modelBuilder.Entity("Movies.Entities.Genre", b =>
                {
                    b.Property<string>("GenreId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            GenreId = "A",
                            Name = "Action"
                        },
                        new
                        {
                            GenreId = "C",
                            Name = "Comedy"
                        },
                        new
                        {
                            GenreId = "D",
                            Name = "Drama"
                        },
                        new
                        {
                            GenreId = "H",
                            Name = "Horror"
                        },
                        new
                        {
                            GenreId = "M",
                            Name = "Musical"
                        },
                        new
                        {
                            GenreId = "R",
                            Name = "RomCom"
                        },
                        new
                        {
                            GenreId = "S",
                            Name = "SciFi"
                        });
                });

            modelBuilder.Entity("Movies.Entities.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieId"), 1L, 1);

                    b.Property<string>("GenreId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Year")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("MovieId");

                    b.HasIndex("GenreId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            MovieId = 1,
                            GenreId = "D",
                            Name = "Casablanca",
                            Year = 1942
                        },
                        new
                        {
                            MovieId = 2,
                            GenreId = "S",
                            Name = "The Matrix",
                            Year = 1998
                        },
                        new
                        {
                            MovieId = 3,
                            GenreId = "A",
                            Name = "Pulp Fiction",
                            Year = 1996
                        });
                });

            modelBuilder.Entity("Movies.Entities.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"), 1L, 1);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int?>("Rating")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("MovieId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            Comments = "A classic!",
                            MovieId = 1,
                            Rating = 5
                        },
                        new
                        {
                            ReviewId = 2,
                            Comments = "They should have gotten together in the end!",
                            MovieId = 1,
                            Rating = 3
                        },
                        new
                        {
                            ReviewId = 3,
                            Comments = "Too slow of a pace",
                            MovieId = 1,
                            Rating = 3
                        },
                        new
                        {
                            ReviewId = 4,
                            Comments = "Based on Descarte's \"brain in a vat\" thought experiment",
                            MovieId = 2,
                            Rating = 4
                        },
                        new
                        {
                            ReviewId = 5,
                            Comments = "Very philosophical",
                            MovieId = 2,
                            Rating = 3
                        },
                        new
                        {
                            ReviewId = 6,
                            Comments = "Very violent but also very funny and clever",
                            MovieId = 3,
                            Rating = 5
                        });
                });

            modelBuilder.Entity("Movies.Entities.Casting", b =>
                {
                    b.HasOne("Movies.Entities.Actor", "Actor")
                        .WithMany("Castings")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movies.Entities.Movie", "Movie")
                        .WithMany("Castings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Movies.Entities.Movie", b =>
                {
                    b.HasOne("Movies.Entities.Genre", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Movies.Entities.Review", b =>
                {
                    b.HasOne("Movies.Entities.Movie", "Movie")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Movies.Entities.Actor", b =>
                {
                    b.Navigation("Castings");
                });

            modelBuilder.Entity("Movies.Entities.Genre", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("Movies.Entities.Movie", b =>
                {
                    b.Navigation("Castings");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
